import { Test, TestingModule } from '@nestjs/testing';
import { AuthService } from '../src/service/auth.service';
import { getModelToken, MongooseModule } from '@nestjs/mongoose';
import { AuthModule } from '../src/module/auth.module';
import { TempData, TempDataSchema } from '../src/dto/schemas/tempdata.schema';
import { JwtModule } from '@nestjs/jwt';
import { ErrCode } from '../src/utils/enumError';
import { AuthSMSRequestDto } from '../src/dto/auth/auth-sms-request.dto';
import { Model } from 'mongoose';
import { User, UserSchema } from '../src/dto/schemas/user.schema';
import { AuthLoginRequestDto } from '../src/dto/auth/auth-login-request.dto';
import { AuthResetPasswordRequestDto } from '../src/dto/auth/auth-reset-password-request.dto';
import { INestApplication } from '@nestjs/common';
//import { User } from '../src/schemas/user.schema';

describe('AuthService (e2e)', () => {
    let app: INestApplication;
    let service: AuthService;
    let userModel: Model<User>
    const username = process.env.LMONGO_USER;
    const password = process.env.LMONGO_PASS;
    const resource = process.env.LMONGO_HOST;
    const port =process.env.LMONGO_PORT;
    const rpSet = process.env.LMONGO_REPLICA_SET;
    //const dbase = process.env.LMONGO_DB
    const encodePassword = encodeURIComponent(password);
    const uri = `mongodb://${username}:${encodePassword}@${resource}:${port}/?retryWrites=true&w=majority&replicaSet=${rpSet}`;
    console.log('uri:', uri);
    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            imports: [
                // ConfigModule.forRoot({
                //     load: [mongoConfig],
                // }),
                MongooseModule.forRoot(uri, {
                    dbName: process.env.LMONGO_DB,
                    directConnection: true,
                    connectTimeoutMS: 5000,
                }),
                MongooseModule.forFeature([
                    { name: User.name, schema: UserSchema },
                    { name: TempData.name, schema: TempDataSchema },
                ]),
                JwtModule.register({
                    secret: process.env.API_KEY,
                    signOptions: {
                        expiresIn: '5m',
                    },
                }),
                AuthModule,
            ],
            providers: [
                AuthService,
                // {
                //     provide: getModelToken('User'),
                //     useValue: {
                //         findOne: jest.fn(),
                //         create: jest.fn(),
                //     },
                // },
                // {
                //     provide: uri,
                //     useValue: {
                //         dbName: dbase,
                //         directConnection: true,
                //         connectTimeoutMS: 5000,
                //     }, // Mock database connection
                // },
            ],
        }).compile();

        service = module.get<AuthService>(AuthService);
        userModel = module.get<Model<User>>(getModelToken(User.name));
        
        app = module.createNestApplication();
        await app.init();        
    });

    it('should be defined', () => {
        expect(service).toBeDefined();
    });

    it('should return IMG who has no 2Fa', async () => {
        const authLogin:AuthLoginRequestDto = {
            username: 'testman',
            password: 'Abc12345',
        }
        const ans = await service.authLogin(authLogin, '::1');
        // console.log('token:', token);
        expect(ans.data).toBeDefined();
        expect(ans.data.totpIMG).toBeDefined();
        // expect(typeof ans.data.token).toBe('string');
        // expect(typeof ans.data.refreshToken).toBe('string');
    });

    it('should return account error', async () => {
        const authRequestDto:AuthLoginRequestDto = {
            username: 'testman1',
            password: 'wrong-password',
        };
        const result = await service.authLogin(authRequestDto, '::1');
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(ErrCode.ACCOUNT_ERROR);
    });

    it('should throw password error', async () => {
        const authRequestDto:AuthLoginRequestDto = {
            username: 'testman',
            password: 'wrong-password',
        };
        const result = await service.authLogin(authRequestDto, '::1');
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(ErrCode.PASSWORD_ERROR);
    });

    let captcha: string;
    let captchaId: string;
    it('should return a valid captcha', async () => {
        const verifyRes = await service.getCaptcha(true);
        // console.log('verifyRes:', verifyRes);
        expect(verifyRes).toBeDefined();
        expect(typeof verifyRes.data.captchaId).toBe('string');
        captcha = verifyRes.error.extra;
        captchaId = verifyRes.data.captchaId;
        console.log('captcha:', captcha, 'captchaId:', captchaId);
    });

    let verifyCode:string;
    it('should send sms successfully', async () => {
        const smsReq:AuthSMSRequestDto= {
            phone: '0936962772',
            captchaId: captchaId,
            captchaCode: captcha,
        }
        const result = await service.sendSmsCode(smsReq, true);
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(undefined);
        verifyCode = result.error.extra;
    });

    it('should throw reset password phone error', async () => {
        const authResetPass:AuthResetPasswordRequestDto = {
            phone: '0936962770',
            newPassword: 'Abc12345',
            verificationCode: verifyCode,
        };
        const result = await service.authResetPassword(authResetPass);
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(ErrCode.PHONE_ERROR);
    });

    it('should throw reset password verify code error', async () => {
        const authResetPass:AuthResetPasswordRequestDto = {
            phone: '0936962772',
            newPassword: 'Abc12345',
            verificationCode: '123456',
        };
        const result = await service.authResetPassword(authResetPass);
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(ErrCode.VERIFY_CODE_ERROR);
    });

    it('should throw reset password ok', async () => {
        const authResetPass:AuthResetPasswordRequestDto = {
            phone: '0936962772',
            newPassword: 'Abc12345',
            verificationCode: verifyCode,
        };
        const result = await service.authResetPassword(authResetPass);
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(undefined);
    });

    it('should throw sms error sms re-access to soon', async () => {
        const verifyRes = await service.getCaptcha(true);
        // console.log('verifyRes:', verifyRes);
        captcha = verifyRes.error.extra;
        captchaId = verifyRes.data.captchaId;
        console.log('captcha:', captcha, 'captchaId:', captchaId);

        const smsReq:AuthSMSRequestDto= {
            phone: '0936962772',
            captchaId: captchaId,
            captchaCode: captcha,
        };
        const result = await service.sendSmsCode(smsReq);
        expect(result).toBeDefined();
        expect(result.errorcode).toBe(ErrCode.SMS_CODE_TOO_FAST);
    });




    // it('should validate a token successfully', async () => {
    //     const token = await service.generateToken({ id: 1, username: 'testuser' });
    //     const isValid = await service.validateToken(token);
    //     expect(isValid).toBeTruthy();
    // });

    // it('should fail to validate an invalid token', async () => {
    //     const isValid = await service.validateToken('invalid-token');
    //     expect(isValid).toBeFalsy();
    // });

    // it('should throw an error for invalid credentials', async () => {
    //     jest.spyOn(userModel, 'findOne').mockResolvedValueOnce(null);

    //     await expect(
    //         service.auth({ phone: 'invalid-phone', password: 'wrong-password' }),
    //     ).rejects.toThrow('Invalid credentials');
    // });    
});